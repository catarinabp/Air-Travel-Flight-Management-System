<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="d9/d85/search_8h" kind="file" language="C++">
    <compoundname>search.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">queue</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">limits</includes>
    <includes local="no">algorithm</includes>
    <includes refid="da/db6/_graph_8h" local="yes">Graph.h</includes>
    <includes refid="df/d81/user_preferences_8h" local="yes">UserPreferences.h</includes>
    <includes refid="d9/d85/search_8h" local="yes">search.h</includes>
    <includedby refid="df/d0a/main_8cpp" local="yes">main.cpp</includedby>
    <includedby refid="d9/d85/search_8h" local="yes">search.h</includedby>
    <incdepgraph>
      <node id="8">
        <label>Graph.h</label>
        <link refid="da/db6/_graph_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>search.h</label>
        <link refid="d9/d85/search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>UserPreferences.h</label>
        <link refid="df/d81/user_preferences_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="12">
        <label>list</label>
      </node>
      <node id="4">
        <label>queue</label>
      </node>
      <node id="11">
        <label>stack</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>main.cpp</label>
        <link refid="df/d0a/main_8cpp"/>
      </node>
      <node id="1">
        <label>search.h</label>
        <link refid="d9/d85/search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="d9/d85/search_8h_1a33b1d6fbfa9c754b1d9893336a0999b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void codeToInfo</definition>
        <argsstring>(const Graph&lt; string &gt; &amp;graph, string code)</argsstring>
        <name>codeToInfo</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; string &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>string</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Prints information corresponding to the provided airport code in the given graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an airport code and looks up the corresponding vertex in the graph. If the vertex has an outgoing edge of type &quot;AIRPORT,&quot; it prints information about the destination airport, including its name, city, and country.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph containing airport information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The airport code for which information is to be printed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="23" column="6" bodyfile="search.h" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1adf59ea458514da8bdb5c9b223aadabdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>string validOptionAirport</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;originalGraph)</argsstring>
        <name>validOptionAirport</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>originalGraph</declname>
        </param>
        <briefdescription>
<para>Takes user input for an airport code, validates its existence, and returns the corresponding airport information. </para>
        </briefdescription>
        <detaileddescription>
<para>This template function prompts the user to enter an airport code, checks if the entered code exists in the given graph, and returns the airport information if valid. It performs a case-insensitive comparison and continues to ask for input until a valid airport code is provided.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph&apos;s vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The original graph containing airport information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The airport information (code, name, city) corresponding to the valid airport code entered by the user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="44" column="8" bodyfile="search.h" bodystart="44" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1ab644077ed076550c71fbe0b93c39778e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int validOptionInt</definition>
        <argsstring>(int down, int up)</argsstring>
        <name>validOptionInt</name>
        <param>
          <type>int</type>
          <declname>down</declname>
        </param>
        <param>
          <type>int</type>
          <declname>up</declname>
        </param>
        <briefdescription>
<para>Takes user input for an option within a specified range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prompts the user to enter an option within the specified range [down + 1, up + 1]. It continues to ask for input until a valid integer within the range is provided.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>down</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the allowed range (inclusive). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the allowed range (inclusive).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The valid option entered by the user within the specified range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="78" column="5" bodyfile="search.h" bodystart="78" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1ab09b9d9712af2b067a5ab5dfc59b9ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>vector&lt; vector&lt; T &gt; &gt;</type>
        <definition>vector&lt; vector&lt; T &gt; &gt; findShortestPath</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;graph, const T &amp;startAirport, const T &amp;endAirport)</argsstring>
        <name>findShortestPath</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>startAirport</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>endAirport</declname>
        </param>
        <briefdescription>
<para>Find the shortest paths from a start airport to an end airport in a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses Dijkstra&apos;s algorithm to find the shortest paths from a start airport to an end airport in the given graph. It returns a vector of vectors, where each inner vector represents a distinct shortest path.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAirport</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the starting airport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endAirport</parametername>
</parameternamelist>
<parameterdescription>
<para>The code of the destination airport. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of vectors containing the shortest paths.</para>
</simplesect>
Example Usage: <programlisting><codeline><highlight class="normal">Graph&lt;string&gt;<sp/>flightGraph;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Populate<sp/>flightGraph...</highlight></codeline>
<codeline><highlight class="normal">string<sp/>startAirport<sp/>=<sp/>&quot;OPO&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>endAirport<sp/>=<sp/>&quot;JFK&quot;;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>paths<sp/>=<sp/>findShortestPath(flightGraph,<sp/>startAirport,<sp/>endAirport);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>paths<sp/>for<sp/>further<sp/>processing...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="130" column="8" bodyfile="search.h" bodystart="130" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1a042f52f14efa68b742e287ebf911f497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void backtrackPaths</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;graph, const unordered_map&lt; T, int &gt; &amp;distance, const T &amp;end, const T &amp;current, vector&lt; T &gt; &amp;currentPath, vector&lt; vector&lt; T &gt; &gt; &amp;allPaths, size_t initialSize=2)</argsstring>
        <name>backtrackPaths</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const unordered_map&lt; T, int &gt; &amp;</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>current</declname>
        </param>
        <param>
          <type>vector&lt; T &gt; &amp;</type>
          <declname>currentPath</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; T &gt; &gt; &amp;</type>
          <declname>allPaths</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>initialSize</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Backtrack and find paths from the current airport to the destination in a graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This function recursively backtracks and finds paths from the current airport to the destination in the given graph. It considers the distances provided and adds information about airlines between consecutive airports in the path. The results are stored in the <computeroutput>allPaths</computeroutput> vector.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>A map containing distances from the start airport to each vertex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination airport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>The current airport in the path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The current path being constructed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allPaths</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store all the paths found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial size of the current path vector (default is 2).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example Usage: <programlisting><codeline><highlight class="normal">Graph&lt;string&gt;<sp/>flightGraph;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Populate<sp/>flightGraph...</highlight></codeline>
<codeline><highlight class="normal">string<sp/>startAirport<sp/>=<sp/>&quot;OPO&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>endAirport<sp/>=<sp/>&quot;JFK&quot;;</highlight></codeline>
<codeline><highlight class="normal">unordered_map&lt;string,<sp/>int&gt;<sp/>distances;<sp/>//<sp/>Populate<sp/>distances<sp/>map...</highlight></codeline>
<codeline><highlight class="normal">vector&lt;vector&lt;string&gt;&gt;<sp/>paths;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;string&gt;<sp/>currentPath;</highlight></codeline>
<codeline><highlight class="normal">backtrackPaths(flightGraph,<sp/>distances,<sp/>endAirport,<sp/>startAirport,<sp/>currentPath,<sp/>paths);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>paths<sp/>for<sp/>further<sp/>processing...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="219" column="6" bodyfile="search.h" bodystart="219" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1a489a16449e68d4c576501fdc5c357681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>string nameToCode</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;graph, string input)</argsstring>
        <name>nameToCode</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>string</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Convert an airport name to its corresponding code. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for airports in the given graph whose names match the input string. It displays the matching options and allows the user to select the desired option by entering a corresponding number. The function then returns the airport code for the selected option.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string representing the airport name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The airport code corresponding to the selected option.</para>
</simplesect>
Example Usage: <programlisting><codeline><highlight class="normal">Graph&lt;string&gt;<sp/>flightGraph;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Populate<sp/>flightGraph...</highlight></codeline>
<codeline><highlight class="normal">string<sp/>userInput<sp/>=<sp/>&quot;Los<sp/>Angeles&quot;;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>airportCode<sp/>=<sp/>nameToCode(flightGraph,<sp/>userInput);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>airportCode<sp/>for<sp/>further<sp/>processing...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="281" column="8" bodyfile="search.h" bodystart="281" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1a909d5e41d454bed34ed4d660d24310db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt; string &gt; cityToCode</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;graph, string input)</argsstring>
        <name>cityToCode</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>string</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Convert a city name to corresponding airport codes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for airports in the given graph whose cities match the input string. It displays the matching options and allows the user to select the desired option by entering a corresponding number. The function then returns a vector of airport codes corresponding to the selected option.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string representing the city name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of airport codes corresponding to the selected option.</para>
</simplesect>
Example Usage: <programlisting><codeline><highlight class="normal">Graph&lt;string&gt;<sp/>flightGraph;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Populate<sp/>flightGraph...</highlight></codeline>
<codeline><highlight class="normal">string<sp/>userInput<sp/>=<sp/>&quot;Los<sp/>Angeles&quot;;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;string&gt;<sp/>airportCodes<sp/>=<sp/>cityToCode(flightGraph,<sp/>userInput);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>airportCodes<sp/>for<sp/>further<sp/>processing...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="342" column="8" bodyfile="search.h" bodystart="342" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="d9/d85/search_8h_1afdf46716f9507323c749b87c8b129af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt;</type>
        <definition>Graph&lt; T &gt; filterGraph</definition>
        <argsstring>(const Graph&lt; T &gt; &amp;originalGraph, const UserPreferences &amp;userPreferences)</argsstring>
        <name>filterGraph</name>
        <param>
          <type>const <ref refid="da/d9a/class_graph" kindref="compound">Graph</ref>&lt; T &gt; &amp;</type>
          <declname>originalGraph</declname>
        </param>
        <param>
          <type>const <ref refid="dd/d20/struct_user_preferences" kindref="compound">UserPreferences</ref> &amp;</type>
          <declname>userPreferences</declname>
        </param>
        <briefdescription>
<para>Filter a graph based on user preferences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an original graph and applies user preferences to filter out vertices and edges. It removes airports, edges with avoided airlines, airports from avoided countries and cities, edges with non-preferred airlines, and airports not from preferred countries or cities.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data stored in the graph vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>The original input graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userPreferences</parametername>
</parameternamelist>
<parameterdescription>
<para>The user preferences specifying filtering criteria. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new graph containing only the vertices and edges that satisfy the user preferences.</para>
</simplesect>
Example Usage: <programlisting><codeline><highlight class="normal">Graph&lt;string&gt;<sp/>originalGraph;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Populate<sp/>originalGraph...</highlight></codeline>
<codeline><highlight class="normal">UserPreferences<sp/>preferences;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>user<sp/>preferences...</highlight></codeline>
<codeline><highlight class="normal">Graph&lt;string&gt;<sp/>filteredGraph<sp/>=<sp/>filterGraph(originalGraph,<sp/>preferences);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>filteredGraph<sp/>for<sp/>further<sp/>processing...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="search.h" line="421" column="7" bodyfile="search.h" bodystart="421" bodyend="552"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PROJETO2AED_SEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROJETO2AED_SEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/db6/_graph_8h" kindref="compound">Graph.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d81/user_preferences_8h" kindref="compound">UserPreferences.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d85/search_8h" kindref="compound">search.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="d9/d85/search_8h_1a33b1d6fbfa9c754b1d9893336a0999b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1a33b1d6fbfa9c754b1d9893336a0999b7" kindref="member">codeToInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;string&gt;</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex<sp/>=<sp/>graph.<ref refid="da/d9a/class_graph_1a8b7b7465fbfd562e2a469f90a437ab75" kindref="member">findVertex</ref>(code);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vertex-&gt;getAdj()[0].getWeight()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AIRPORT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex-&gt;getAdj()[0].getDest()-&gt;getInfo();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>code<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1aacf264f427569269eab36c2960d5e681" kindref="member">getAirportName</ref>(vertex-&gt;getAdj()[0].getDest()-&gt;getInfo())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1a7d3f4aab3e50278c8e0c92942e4e3b54" kindref="member">getCityName</ref>(vertex-&gt;getAdj()[0].getDest()-&gt;getInfo())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1a7ade6cbb21815683ad69a67b4ea08684" kindref="member">getCountryName</ref>(vertex-&gt;getAdj()[0].getDest()-&gt;getInfo())<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="44" refid="d9/d85/search_8h_1adf59ea458514da8bdb5c9b223aadabdf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1adf59ea458514da8bdb5c9b223aadabdf" kindref="member">validOptionAirport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;originalGraph)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>codeToTry;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>type<sp/>the<sp/>airport<sp/>code:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cin<sp/>&gt;&gt;<sp/>codeToTry;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform(codeToTry.begin(),<sp/>codeToTry.end(),<sp/>codeToTry.begin(),<sp/>::toupper);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo())<sp/>==<sp/>codeToTry)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Selected<sp/>airport:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1aacf264f427569269eab36c2960d5e681" kindref="member">getAirportName</ref>(vertex-&gt;getInfo())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d7/dc5/statistics_8h_1a7d3f4aab3e50278c8e0c92942e4e3b54" kindref="member">getCityName</ref>(vertex-&gt;getInfo())<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;That<sp/>code<sp/>doesn&apos;t<sp/>exist!<sp/>Please<sp/>verify<sp/>the<sp/>spelling.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1adf59ea458514da8bdb5c9b223aadabdf" kindref="member">validOptionAirport</ref>(originalGraph);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="d9/d85/search_8h_1ab644077ed076550c71fbe0b93c39778e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1ab644077ed076550c71fbe0b93c39778e" kindref="member">validOptionInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>down,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>up)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myNumber;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>until<sp/>a<sp/>valid<sp/>integer<sp/>is<sp/>entered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Enter<sp/>an<sp/>option:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::cin<sp/>&gt;&gt;<sp/>myNumber<sp/>&amp;&amp;<sp/>myNumber<sp/>&gt;<sp/>down-1<sp/>&amp;&amp;<sp/>myNumber<sp/>&lt;<sp/>up+1)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>was<sp/>successful,<sp/>break<sp/>out<sp/>of<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>failed,<sp/>handle<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>input.<sp/>Please<sp/>enter<sp/>an<sp/>option.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>fail<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cin.clear();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>the<sp/>invalid<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>now<sp/>have<sp/>a<sp/>valid<sp/>integer<sp/>in<sp/>myNumber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>entered:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>myNumber<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myNumber;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="130" refid="d9/d85/search_8h_1ab09b9d9712af2b067a5ab5dfc59b9ba6" refkind="member"><highlight class="normal">vector&lt;vector&lt;T&gt;&gt;<sp/><ref refid="d9/d85/search_8h_1ab09b9d9712af2b067a5ab5dfc59b9ba6" kindref="member">findShortestPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;startAirport,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;endAirport)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;T&gt;&gt;<sp/>allPaths;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>currentPath;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endAirport<sp/>!=<sp/>startAirport)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>to<sp/>store<sp/>distances<sp/>from<sp/>startAirport<sp/>to<sp/>each<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;T,<sp/>int&gt;<sp/>distance;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Priority<sp/>queue<sp/>to<sp/>store<sp/>vertices<sp/>and<sp/>their<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority_queue&lt;pair&lt;int,<sp/>T&gt;,<sp/>vector&lt;pair&lt;int,<sp/>T&gt;&gt;,<sp/>greater&lt;pair&lt;int,<sp/>T&gt;&gt;&gt;<sp/>pq;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vertex<sp/>:<sp/>graph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vertex-&gt;getAdj()[0].getWeight()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AIRPORT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance[vertex-&gt;getInfo()]<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>distance<sp/>for<sp/>the<sp/>startAirport<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance[startAirport]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>startAirport<sp/>into<sp/>the<sp/>priority<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq.push({0,<sp/>startAirport});</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dijkstra&apos;s<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!pq.empty())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>vertex<sp/>with<sp/>the<sp/>smallest<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>currentAirport<sp/>=<sp/>pq.top().second;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq.pop();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>neighboring<sp/>vertices<sp/>of<sp/>the<sp/>currentAirport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!graph.<ref refid="da/d9a/class_graph_1a8b7b7465fbfd562e2a469f90a437ab75" kindref="member">findVertex</ref>(currentAirport)-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neighbors<sp/>=<sp/>graph.<ref refid="da/d9a/class_graph_1a8b7b7465fbfd562e2a469f90a437ab75" kindref="member">findVertex</ref>(currentAirport)-&gt;getAdj();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(neighbors[0].getWeight()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AIRPORT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.erase(neighbors.begin());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>distances<sp/>to<sp/>neighboring<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edge<sp/>:<sp/>neighbors)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>neighborAirport<sp/>=<sp/>edge.getDest()-&gt;getInfo();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newDistance<sp/>=<sp/>distance[currentAirport]<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>equal<sp/>weight<sp/>for<sp/>all<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>shorter<sp/>path<sp/>is<sp/>found,<sp/>update<sp/>the<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newDistance<sp/>&lt;<sp/>distance[neighborAirport]<sp/>||<sp/>distance[neighborAirport]<sp/>==<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance[neighborAirport]<sp/>=<sp/>newDistance;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq.push({newDistance,<sp/>neighborAirport});</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconstruct<sp/>all<sp/>paths<sp/>from<sp/>endAirport<sp/>to<sp/>startAirport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d85/search_8h_1a042f52f14efa68b742e287ebf911f497" kindref="member">backtrackPaths</ref>(graph,distance,<sp/>endAirport,<sp/>startAirport,<sp/>currentPath,<sp/>allPaths);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allPaths;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="219" refid="d9/d85/search_8h_1a042f52f14efa68b742e287ebf911f497" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1a042f52f14efa68b742e287ebf911f497" kindref="member">backtrackPaths</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_map&lt;T,<sp/>int&gt;<sp/>&amp;distance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;current,<sp/>vector&lt;T&gt;<sp/>&amp;currentPath,<sp/>vector&lt;vector&lt;T&gt;&gt;<sp/>&amp;allPaths,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initialSize<sp/>=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>meu<sp/>=<sp/>distance.at(end);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(distance.at(end)<sp/>!=<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.push_back(current);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allPaths.push_back(currentPath);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.resize(initialSize);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialSize<sp/>=<sp/>currentPath.size();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neighbors<sp/>=<sp/>graph.<ref refid="da/d9a/class_graph_1a8b7b7465fbfd562e2a469f90a437ab75" kindref="member">findVertex</ref>(current)-&gt;getAdj();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(neighbors[0].getWeight()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AIRPORT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.erase(neighbors.begin());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edge<sp/>:<sp/>neighbors)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.push_back(current);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>neighborAirport<sp/>=<sp/>edge.getDest()-&gt;getInfo();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(find(currentPath.begin(),<sp/>currentPath.end(),<sp/>neighborAirport)<sp/>==<sp/>currentPath.end())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lessThanCurrent<sp/>=<sp/>(int)<sp/>currentPath.size()<sp/>/<sp/>2<sp/>+<sp/>1<sp/>&lt;<sp/>distance.at(end);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>lessDifferentThatSource<sp/>=<sp/>distance.at(neighborAirport)<sp/>+<sp/>distance.at(current)<sp/>&lt;<sp/>distance.at(end)<sp/>&amp;&amp;<sp/>distance.at(neighborAirport)<sp/>!=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sameAsEnd<sp/>=<sp/>neighborAirport<sp/>==<sp/>end;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>higherOnlyIfEnd<sp/>=<sp/>(distance.at(neighborAirport)<sp/>+<sp/>distance.at(current)<sp/>&gt;<sp/>distance.at(end)<sp/>&amp;&amp;<sp/>neighborAirport<sp/>==<sp/>end);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lessThanCurrent<sp/>||<sp/>sameAsEnd<sp/>||<sp/>higherOnlyIfEnd)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>airline<sp/>information<sp/>between<sp/>consecutive<sp/>airports<sp/>in<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.push_back(edge.getWeight());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d85/search_8h_1a042f52f14efa68b742e287ebf911f497" kindref="member">backtrackPaths</ref>(graph,<sp/>distance,<sp/>end,<sp/>neighborAirport,<sp/>currentPath,<sp/>allPaths,<sp/>initialSize);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.resize(initialSize);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialSize<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPath.resize(initialSize-2);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="281" refid="d9/d85/search_8h_1a489a16449e68d4c576501fdc5c357681" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1a489a16449e68d4c576501fdc5c357681" kindref="member">nameToCode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>options;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>graph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportName<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1aacf264f427569269eab36c2960d5e681" kindref="member">getAirportName</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform(airportName.begin(),<sp/>airportName.end(),<sp/>airportName.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform(input.begin(),<sp/>input.end(),<sp/>input.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(airportName.find(input)<sp/>!=<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.push_back(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(options.empty())<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>airport<sp/>with<sp/>this<sp/>name.<sp/>Try<sp/>again.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stop)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>type<sp/>the<sp/>airport<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(std::cin,<sp/>source);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1a489a16449e68d4c576501fdc5c357681" kindref="member">nameToCode</ref>(graph,<sp/>source);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>should<sp/>display<sp/>all<sp/>the<sp/>options<sp/>in<sp/>a<sp/>menu<sp/>so<sp/>the<sp/>user<sp/>can<sp/>select<sp/>the<sp/>option<sp/>they<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(options.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Choose<sp/>the<sp/>option<sp/>you<sp/>want:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>options.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>i<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>options[i].substr(2)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option<sp/>=<sp/><ref refid="d9/d85/search_8h_1ab644077ed076550c71fbe0b93c39778e" kindref="member">validOptionInt</ref>(1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>options.size());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(options[option-1]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="342" refid="d9/d85/search_8h_1a909d5e41d454bed34ed4d660d24310db" refkind="member"><highlight class="normal">vector&lt;string&gt;<sp/><ref refid="d9/d85/search_8h_1a909d5e41d454bed34ed4d660d24310db" kindref="member">cityToCode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_multimap&lt;string,<sp/>string&gt;<sp/>map;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>options;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>graph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCity<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a7d3f4aab3e50278c8e0c92942e4e3b54" kindref="member">getCityName</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>country<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a7ade6cbb21815683ad69a67b4ea08684" kindref="member">getCountryName</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>option<sp/>=<sp/>airportCity<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>country;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform(airportCity.begin(),<sp/>airportCity.end(),<sp/>airportCity.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform(input.begin(),<sp/>input.end(),<sp/>input.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(airportCity.find(input)<sp/>!=<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(find(options.begin(),<sp/>options.end(),<sp/>option)<sp/>==<sp/>options.end())<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.push_back(option);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map.insert(pair&lt;string,<sp/>string&gt;<sp/>(option,<sp/>airportCode));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(options.empty())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>city<sp/>with<sp/>this<sp/>name.<sp/>Try<sp/>again.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stop)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>type<sp/>the<sp/>city&apos;s<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>city;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(std::cin,<sp/>city);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d85/search_8h_1a909d5e41d454bed34ed4d660d24310db" kindref="member">cityToCode</ref>(graph,<sp/>city);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(options.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Choose<sp/>the<sp/>option<sp/>you<sp/>want:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>options.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>i<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>options[i].substr(2)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option<sp/>=<sp/><ref refid="d9/d85/search_8h_1ab644077ed076550c71fbe0b93c39778e" kindref="member">validOptionInt</ref>(1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>options.size());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>codes;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>itr<sp/>:<sp/>map)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(itr.first<sp/>==<sp/>options[option-1])<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes.push_back(itr.second);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>codes;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------<sp/>FILTERING<sp/>GRAPH<sp/>------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="421" refid="d9/d85/search_8h_1afdf46716f9507323c749b87c8b129af0" refkind="member"><highlight class="normal"><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/><ref refid="d9/d85/search_8h_1afdf46716f9507323c749b87c8b129af0" kindref="member">filterGraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>&amp;originalGraph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d20/struct_user_preferences" kindref="compound">UserPreferences</ref><sp/>&amp;userPreferences)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d9a/class_graph" kindref="compound">Graph&lt;T&gt;</ref><sp/>filteredGraph<sp/>=<sp/>originalGraph;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>based<sp/>on<sp/>avoidedAirports<sp/>preference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;airport:<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1afb23bf710d1b7678727d2d87359ea99a" kindref="member">avoidedAirports</ref>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airport);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>edges<sp/>based<sp/>on<sp/>avoidedAirlines<sp/>preference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1ab004aa38eb0912baaf5ee27bd5297703" kindref="member">avoidedAirlines</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edge:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flight:<sp/>edge-&gt;getAdj())<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1ab004aa38eb0912baaf5ee27bd5297703" kindref="member">avoidedAirlines</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1ab004aa38eb0912baaf5ee27bd5297703" kindref="member">avoidedAirlines</ref>.end(),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flight.getWeight())<sp/>!=<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1ab004aa38eb0912baaf5ee27bd5297703" kindref="member">avoidedAirlines</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>edge<sp/>with<sp/>the<sp/>avoided<sp/>airline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1ad9ef501254809330045c899c512d3a7c" kindref="member">removeEdgeByWeight</ref>(edge-&gt;getInfo(),<sp/>flight.getDest()-&gt;getInfo(),<sp/>flight.getWeight());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>based<sp/>on<sp/>avoidCountries<sp/>preference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1a5bc749253324b4cb91d5bf0c116ba09f" kindref="member">avoidedCountries</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1a5bc749253324b4cb91d5bf0c116ba09f" kindref="member">avoidedCountries</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a5bc749253324b4cb91d5bf0c116ba09f" kindref="member">avoidedCountries</ref>.end(),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dc5/statistics_8h_1a7ade6cbb21815683ad69a67b4ea08684" kindref="member">getCountryName</ref>(vertex-&gt;getInfo()))<sp/>!=<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a5bc749253324b4cb91d5bf0c116ba09f" kindref="member">avoidedCountries</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airportCode);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>based<sp/>on<sp/>avoidCities<sp/>preference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1a4599f3bdf7263a3c3aaf96881cdd5c59" kindref="member">avoidedCities</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1a4599f3bdf7263a3c3aaf96881cdd5c59" kindref="member">avoidedCities</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a4599f3bdf7263a3c3aaf96881cdd5c59" kindref="member">avoidedCities</ref>.end(),</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dc5/statistics_8h_1a7d3f4aab3e50278c8e0c92942e4e3b54" kindref="member">getCityName</ref>(vertex-&gt;getInfo()))<sp/>!=<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a4599f3bdf7263a3c3aaf96881cdd5c59" kindref="member">avoidedCities</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airportCode);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airlines<sp/>different<sp/>from<sp/>the<sp/>preferred<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1a86c43f59ac9b15194b7140db4350514e" kindref="member">preferredAirlines</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>to<sp/>store<sp/>edges<sp/>to<sp/>be<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::tuple&lt;T,<sp/>T,<sp/>std::string&gt;&gt;<sp/>edgesToRemove;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>filteredGraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vertex<sp/>:<sp/>filteredGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flight<sp/>:<sp/>vertex-&gt;getAdj())<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flight.getWeight()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;AIRPORT&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1a86c43f59ac9b15194b7140db4350514e" kindref="member">preferredAirlines</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a86c43f59ac9b15194b7140db4350514e" kindref="member">preferredAirlines</ref>.end(),</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flight.getWeight())<sp/>==<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1a86c43f59ac9b15194b7140db4350514e" kindref="member">preferredAirlines</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>edge<sp/>to<sp/>the<sp/>list<sp/>of<sp/>edges<sp/>to<sp/>be<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgesToRemove.emplace_back(vertex-&gt;getInfo(),<sp/>flight.getDest()-&gt;getInfo(),<sp/>flight.getWeight());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>edges<sp/>from<sp/>the<sp/>filteredGraph<sp/>using<sp/>the<sp/>stored<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edgeInfo<sp/>:<sp/>edgesToRemove)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1ad9ef501254809330045c899c512d3a7c" kindref="member">removeEdgeByWeight</ref>(std::get&lt;0&gt;(edgeInfo),<sp/>std::get&lt;1&gt;(edgeInfo),<sp/>std::get&lt;2&gt;(edgeInfo));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>different<sp/>from<sp/>the<sp/>preferred<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1abd260a1b5c0fc94377652d64bcccc622" kindref="member">preferredAirports</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1abd260a1b5c0fc94377652d64bcccc622" kindref="member">preferredAirports</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1abd260a1b5c0fc94377652d64bcccc622" kindref="member">preferredAirports</ref>.end(),</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo()))<sp/>==<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1abd260a1b5c0fc94377652d64bcccc622" kindref="member">preferredAirports</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airportCode);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>different<sp/>from<sp/>the<sp/>preferred<sp/>countries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1afadc2ebbf67ca62e5c044a8d45950b27" kindref="member">preferredCountries</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1afadc2ebbf67ca62e5c044a8d45950b27" kindref="member">preferredCountries</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1afadc2ebbf67ca62e5c044a8d45950b27" kindref="member">preferredCountries</ref>.end(),</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dc5/statistics_8h_1a7ade6cbb21815683ad69a67b4ea08684" kindref="member">getCountryName</ref>(vertex-&gt;getInfo()))<sp/>==<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1afadc2ebbf67ca62e5c044a8d45950b27" kindref="member">preferredCountries</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airportCode);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>airports<sp/>different<sp/>from<sp/>the<sp/>preferred<sp/>cities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!userPreferences.<ref refid="dd/d20/struct_user_preferences_1ac635edc7b60fd591baf5e3d046740222" kindref="member">preferredCities</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertex:<sp/>originalGraph.<ref refid="da/d9a/class_graph_1a923b43995f81ad9319bbc81a1e433e64" kindref="member">getVertexSet</ref>())<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex-&gt;getAdj().empty())<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d7/dc5/statistics_8h_1a36fb656b725528a3af60a4527db5bbe9" kindref="member">getId</ref>(vertex-&gt;getInfo())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(userPreferences.<ref refid="dd/d20/struct_user_preferences_1ac635edc7b60fd591baf5e3d046740222" kindref="member">preferredCities</ref>.begin(),<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1ac635edc7b60fd591baf5e3d046740222" kindref="member">preferredCities</ref>.end(),</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/dc5/statistics_8h_1a7d3f4aab3e50278c8e0c92942e4e3b54" kindref="member">getCityName</ref>(vertex-&gt;getInfo()))<sp/>==<sp/>userPreferences.<ref refid="dd/d20/struct_user_preferences_1ac635edc7b60fd591baf5e3d046740222" kindref="member">preferredCities</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>airportCode<sp/>=<sp/><ref refid="d7/dc5/statistics_8h_1a83e40fd04baf45d2913fe2c0a8b55155" kindref="member">getAirportCode</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(vertex-&gt;getInfo());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filteredGraph.<ref refid="da/d9a/class_graph_1af9c903104ad69a7782979fa9caedf163" kindref="member">removeVertex</ref>(airportCode);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filteredGraph;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//PROJETO2AED_SEARCH_H</highlight></codeline>
    </programlisting>
    <location file="search.h"/>
  </compounddef>
</doxygen>
